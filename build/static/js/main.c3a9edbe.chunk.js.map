{"version":3,"sources":["components/Cards/cards.module.css","components/Cards/cards.jsx","api/index.js","components/Charts/charts.jsx","components/CountryPicker/countrypicker.jsx","App.js","index.js","components/Charts/charts.module.css","App.module.css","images/corona.png"],"names":["module","exports","Cards","data","Object","keys","length","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","confirmed","value","duration","separator","Date","lastUpdate","toDateString","recovered","deaths","url","fetchData","country","a","fetchUrl","get","console","log","fetchDaily","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","dailydata","setDailyData","useEffect","fetchDailyData","CountryPicker","handleCountryChange","setCountries","getCountries","FormControl","formcontrol","NativeSelect","onChange","e","target","key","App","state","result","setState","this","StyleSheet","image","src","coronaImage","alt","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3a9edbe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__4LS_6\",\"card\":\"cards_card__b4kBy\",\"infected\":\"cards_infected__2VjC4\",\"recovered\":\"cards_recovered__LydRx\",\"deaths\":\"cards_deaths__70Jir\",\"div\":\"cards_div__3U5el\"};","import React from 'react';\r\nimport {Card, CardContent, Grid, Typography} from '@material-ui/core';\r\nimport styles from './cards.module.css';\r\nimport CountUP from 'react-countup';\r\nimport cx from 'classnames';\r\nconst Cards = ({data}) => {\r\n\r\n    if(!Object.keys(data).length){\r\n        return 'loading'\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify='center'>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>INFECTED</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUP \r\n                                start={0}\r\n                                end={data.confirmed.value}\r\n                                duration={2.5}\r\n                                separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(data.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of active cases</Typography>\r\n\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>RECOVERED</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUP \r\n                                start={0}\r\n                                end={data.recovered.value}\r\n                                duration={2.5}\r\n                                separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(data.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of recoveries</Typography>\r\n\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>DEATHS</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUP \r\n                                start={0}\r\n                                end={data.deaths.value}\r\n                                duration={2.5}\r\n                                separator=','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(data.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of deaths</Typography>\r\n\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import {get} from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n\r\n    let fetchUrl = url;\r\n    if(country){\r\n        fetchUrl = `${url}/countries/${country}`\r\n    }\r\n    try{\r\n        const {data: {confirmed, deaths, recovered, lastUpdate}} =  await get(fetchUrl);\r\n        console.log('called', confirmed);\r\n            return {\r\n                confirmed,\r\n                deaths,\r\n                recovered,\r\n                lastUpdate,\r\n            };\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const fetchDaily = async () => {\r\n    try{\r\n        const {data} = await get(`${url}/daily`);\r\n        console.log(data);\r\n        const modifiedData = data.map(dailyData => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n        return modifiedData;\r\n    }catch(error){\r\n        console.log(error);\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const {data: {countries}} = await get(`${url}/countries`);\r\n         return countries.map(country => country.name);\r\n    }catch(error){\r\n        console.log(error);\r\n        return error;\r\n    }\r\n    \r\n}","import React, {useState, useEffect} from 'react';\r\nimport {fetchDaily} from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport styles from './charts.module.css';\r\n\r\nconst Charts = ({data, country}) => {\r\n    const [dailydata, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchDailyData = async () => {\r\n            setDailyData( await fetchDaily());\r\n        }\r\n        fetchDailyData()\r\n    }, [])\r\n\r\n    const LineChart = (\r\n       dailydata.length &&  (<Line \r\n            data={{\r\n                labels: dailydata.map(({date}) => date),\r\n                datasets: [{\r\n                    data: dailydata.map(({confirmed}) => confirmed),\r\n                    label: 'infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true\r\n                },\r\n                {\r\n                    data: dailydata.map(({deaths}) => deaths),\r\n                    label: 'deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255, 0, 0, .5)',\r\n                    fill: true\r\n                }\r\n            ]\r\n            }}\r\n        />)\r\n    );\r\n\r\n    const BarChart = (\r\n        data.confirmed && (<Bar \r\n            data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [{\r\n                    label: 'people',\r\n                    backgroundColor: [\r\n                        'rgba(0, 255, 0, .5)',\r\n                        'rgba(0, 0, 255, .5)',\r\n                        'rgba(255, 0, 0, .5)',\r\n                    ],\r\n                    data: [data.confirmed.value, data.recovered.value, data.deaths.value]\r\n                }]\r\n            }}\r\n            options={{\r\n                legend: {display: false},\r\n                title: {display: true, text: `Current state in ${country}`}\r\n            \r\n            }}\r\n        />)\r\n    )\r\n\r\n    return (\r\n        // dailydata.length > 0 &&  (<Line \r\n        //     data={{\r\n        //         labels: '',\r\n        //         datasets: []\r\n        //     }}\r\n        // />)\r\n        <div className={styles.container}>\r\n           \r\n            {country ? BarChart : LineChart}\r\n        </div>\r\n    )\r\n\r\n   \r\n}\r\n\r\nexport default Charts;","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\n\r\nimport {fetchCountries} from '../../api';\r\nimport styles from './countrypicker.module.css';\r\n\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [countries, setCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getCountries = async () => {\r\n            setCountries( await fetchCountries());\r\n        }\r\n        getCountries()\r\n    }, [setCountries])\r\n\r\n\r\n    return(\r\n      \r\n            <FormControl className={styles.formcontrol}>\r\n                <NativeSelect onChange={(e) => handleCountryChange(e.target.value)}>\r\n                    <option value=''>Global</option>\r\n                    {countries.length && countries.map(country => (<option key={country} value={country}>{country}</option>))}\r\n                </NativeSelect>\r\n            </FormControl>\r\n    )\r\n\r\n}\r\n\r\nexport default CountryPicker;","import React, {Component} from 'react';\nimport {Card, CountryPicker, Chart} from './components'\nimport styles from './App.module.css';\nimport {fetchData} from './api';\nimport coronaImage from './images/corona.png'\nclass App extends Component{\n  state = {\n    data: {},\n    country: ''\n  }\n  async componentDidMount() {\n   const result =  await fetchData()\n    this.setState({data: result})\n  }\n\n  handleCountryChange = async (country) => {\n    const result =  await fetchData(country)\n    this.setState({data: result, country: country})\n    \n  }\n  render(){\n    const {data, country} = this.state;\n    console.log(data)\n    return (\n      <div className={styles.container}>\n        <img className={StyleSheet.image} src={coronaImage} alt=\"covid-19\" />\n        <Card data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"charts_container__HOEP9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1Ratg\",\"image\":\"App_image__2H0ow\"};","module.exports = __webpack_public_path__ + \"static/media/corona.d7265326.png\";"],"sourceRoot":""}